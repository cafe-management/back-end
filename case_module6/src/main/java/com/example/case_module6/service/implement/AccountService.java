package com.example.case_module6.service.implement;

import com.example.case_module6.model.Account;
import com.example.case_module6.model.User;
import com.example.case_module6.repository.AccountRepository;
import com.example.case_module6.service.IAccountService;
import com.example.case_module6.service.IUserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class AccountService implements IAccountService {
    @Autowired
    private AccountRepository accountRepository;
    @Override
    public boolean validateLogin(String username, String password) {
        Account account = accountRepository.findByUserName(username);
        System.out.println("ƒêƒÉng nh·∫≠p v·ªõi username: " + username);
        if (account == null) {
            System.out.println("Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n v·ªõi username: " + username);
            return false;
        }
        System.out.println("M·∫≠t kh·∫©u g·ªëc: " + password);
        System.out.println("M·∫≠t kh·∫©u m√£ h√≥a trong database: " + account.getPassword());
        BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();
        return encoder.matches(password, account.getPassword());
    }

    @Override
    public List<Account> getAllAccounts() {
        return accountRepository.findAll();
    }

    @Override
    public boolean changePassword(String userName, String oldPassword, String newPassword, String oldPasswordRaw) {
        Account account = accountRepository.findByUserName(userName);

        if (account == null) {
            System.out.println("Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n");
            return false;
        }

        BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();

        // üü¢ Ki·ªÉm tra m·∫≠t kh·∫©u th√¥ t·ª´ session tr∆∞·ªõc
        if (oldPasswordRaw != null && oldPasswordRaw.equals(oldPassword)) {
            System.out.println("‚úÖ M·∫≠t kh·∫©u kh·ªõp v·ªõi m·∫≠t kh·∫©u th√¥ trong session");
        } else {
            // üü° Ki·ªÉm tra v·ªõi m·∫≠t kh·∫©u ƒë√£ m√£ h√≥a trong database
            if (!encoder.matches(oldPassword, account.getPassword())) {
                System.out.println("‚ùå M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng");
                return false;
            }
        }

        // üü¢ M√£ h√≥a m·∫≠t kh·∫©u m·ªõi v√† c·∫≠p nh·∫≠t v√†o database
        account.setPassword(encoder.encode(newPassword));
        accountRepository.save(account);

        System.out.println("‚úÖ ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng");
        return true;
    }


    @Override
    public String getRoleIdByUsername(String username) {
        Account account = accountRepository.findByUserName(username);
        if (account != null) {
            return account.getRole().getNameRoles();
        }
        return null;
    }

}
